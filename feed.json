{
    "version": "https://jsonfeed.org/version/1",
    "title": "徐爸爸是超人",
    "description": "",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2022/01/19/fronted/Vue/%E7%BA%BF%E4%B8%8A%E7%8E%AF%E5%A2%83%E5%BC%80%E5%90%AFvue%E5%B7%A5%E5%85%B7/",
            "url": "http://example.com/2022/01/19/fronted/Vue/%E7%BA%BF%E4%B8%8A%E7%8E%AF%E5%A2%83%E5%BC%80%E5%90%AFvue%E5%B7%A5%E5%85%B7/",
            "title": "开启vue2 production调试的方法",
            "date_published": "2022-01-18T16:00:00.000Z",
            "content_html": "<h2 id=\"开启vue2-production调试的方法\"><a class=\"markdownIt-Anchor\" href=\"#开启vue2-production调试的方法\">#</a> 开启 vue2 production 调试的方法</h2>\n<ol>\n<li>找 vue 实例，可以说 99% 的应用是用的 app.<strong>vue</strong> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;如果实在找不到,那么就到找到任意组件，用组件元素.__vue__.$root来获取 </span><br><span class=\"line\">var vue &#x3D; app.__vue__ </span><br></pre></td></tr></table></figure>\n</li>\n<li>vue 构造函数 <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var constructor &#x3D; vue.__proto__.constructor </span><br></pre></td></tr></table></figure>\n</li>\n<li>Vue 有多级，要找到最顶级的 <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var Vue &#x3D; constructor; </span><br><span class=\"line\"></span><br><span class=\"line\">while(Vue.super)&#123; </span><br><span class=\"line\">Vue &#x3D; Vue.super </span><br><span class=\"line\"></span><br><span class=\"line\">&#125; </span><br><span class=\"line\">console.log(Vue)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</li>\n<li>找到 config，并且把 devtools 设置成 true <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.config.devtools &#x3D; true; </span><br></pre></td></tr></table></figure>\n</li>\n<li>注册到 Vue DevTool 上 <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var hook &#x3D; window.__VUE_DEVTOOLS_GLOBAL_HOOK__ </span><br><span class=\"line\">hook.emit(&#39;init&#39;,Vue) </span><br></pre></td></tr></table></figure>\n</li>\n<li>如果有 vuex store，也注册<br>\n<mark>这部分代码参考了<a href=\"https://blog.csdn.net/weixin_34352449/article/details/91466542\"> https://blog.csdn.net/weixin_34352449/article/details/91466542</a></mark> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if(vue.$store)&#123; </span><br><span class=\"line\">var store &#x3D; vue.$store; </span><br><span class=\"line\">    store._devtoolHook &#x3D; hook; </span><br><span class=\"line\">    hook.emit(&#39;vuex:init&#39;, store); </span><br><span class=\"line\">    hook.on(&#39;vuex:travel-to-state&#39;,function(targetState)&#123; </span><br><span class=\"line\">        store.replaceState(targetState); </span><br><span class=\"line\">    &#125;); </span><br><span class=\"line\">    store.subscribe(function(mutation, state)&#123; </span><br><span class=\"line\">        hook.emit(&#39;vuex:mutation&#39;, mutation, state); </span><br><span class=\"line\">    &#125;); </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2021/01/27/fronted/CSS/%E6%96%87%E5%AD%97%E6%B8%90%E5%8F%98/",
            "url": "http://example.com/2021/01/27/fronted/CSS/%E6%96%87%E5%AD%97%E6%B8%90%E5%8F%98/",
            "title": "文字渐变",
            "date_published": "2021-01-26T16:00:00.000Z",
            "content_html": "<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">text &#123;</span><br><span class=\"line\">  background: linear-gradient(to bottom, #8AF0FF,#3780E6);;</span><br><span class=\"line\">  -webkit-background-clip: text;</span><br><span class=\"line\">  color: transparent;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>",
            "tags": []
        },
        {
            "id": "http://example.com/2021/01/20/fronted/vscode/%E4%BB%A3%E7%A0%81%E6%AE%B5/",
            "url": "http://example.com/2021/01/20/fronted/vscode/%E4%BB%A3%E7%A0%81%E6%AE%B5/",
            "title": "vue文件的代码段",
            "date_published": "2021-01-19T16:00:00.000Z",
            "content_html": "<h2 id=\"vue文件的代码段\"><a class=\"markdownIt-Anchor\" href=\"#vue文件的代码段\">#</a> vue 文件的代码段</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &#x2F;&#x2F; Place your snippets for vue here. Each snippet is defined under a snippet name and has a prefix, body and</span><br><span class=\"line\">  &#x2F;&#x2F; description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:</span><br><span class=\"line\">  &#x2F;&#x2F; $1, $2 for tab stops, $0 for the final cursor position, and $&#123;1:label&#125;, $&#123;2:another&#125; for placeholders. Placeholders with the</span><br><span class=\"line\">  &#x2F;&#x2F; same ids are connected.</span><br><span class=\"line\">  &#x2F;&#x2F; Example:</span><br><span class=\"line\">  &#x2F;&#x2F; &quot;Print to console&quot;: &#123;</span><br><span class=\"line\">  &#x2F;&#x2F; \t&quot;prefix&quot;: &quot;log&quot;,</span><br><span class=\"line\">  &#x2F;&#x2F; \t&quot;body&quot;: [</span><br><span class=\"line\">  &#x2F;&#x2F; \t\t&quot;console.log(&#39;$1&#39;);&quot;,</span><br><span class=\"line\">  &#x2F;&#x2F; \t\t&quot;$2&quot;</span><br><span class=\"line\">  &#x2F;&#x2F; \t],</span><br><span class=\"line\">  &#x2F;&#x2F; \t&quot;description&quot;: &quot;Log output to console&quot;</span><br><span class=\"line\">  &#x2F;&#x2F; &#125;</span><br><span class=\"line\">  &quot;Print to console&quot;: &#123;</span><br><span class=\"line\">    &quot;prefix&quot;: &quot;vue&quot;,</span><br><span class=\"line\">    &quot;body&quot;: [</span><br><span class=\"line\">      &quot;&lt;template&gt;&quot;,</span><br><span class=\"line\">      &quot;  &lt;div class&#x3D;\\&quot;$0\\&quot;&gt;\\n&quot;,</span><br><span class=\"line\">      &quot;  &lt;&#x2F;div&gt;&quot;,</span><br><span class=\"line\">      &quot;&lt;&#x2F;template&gt;\\n&quot;,</span><br><span class=\"line\">      &quot;&lt;script type&#x3D;\\&quot;text&#x2F;javascript\\&quot;&gt;&quot;,</span><br><span class=\"line\">      &quot;export default &#123;&quot;,</span><br><span class=\"line\">      &quot;  name:\\&quot;$1\\&quot;,&quot;,</span><br><span class=\"line\">      &quot;  data() &#123;&quot;,</span><br><span class=\"line\">      &quot;    return &#123;\\n&quot;,</span><br><span class=\"line\">      &quot;    &#125;&quot;,</span><br><span class=\"line\">      &quot;  &#125;,&quot;,</span><br><span class=\"line\">      &quot;  components: &#123;\\n&quot;,</span><br><span class=\"line\">      &quot;  &#125;&quot;,</span><br><span class=\"line\">      &quot;&#125;&quot;,</span><br><span class=\"line\">      &quot;&lt;&#x2F;script&gt;\\n&quot;,</span><br><span class=\"line\">      &quot;&lt;style lang&#x3D;\\&quot;less\\&quot; scoped&gt;&quot;,</span><br><span class=\"line\">      &quot;&lt;&#x2F;style&gt;&quot;,</span><br><span class=\"line\">      &quot;$2&quot;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    &quot;description&quot;: &quot;Log output to console&quot;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;Vue Template&quot;: &#123;</span><br><span class=\"line\">    &quot;prefix&quot;: &quot;vueT&quot;,</span><br><span class=\"line\">    &quot;body&quot;: [</span><br><span class=\"line\">      &quot;&lt;template&gt;\\n\\t&lt;div&gt;\\n\\n\\t&lt;&#x2F;div&gt;\\n&lt;&#x2F;template&gt;\\n\\n&quot;,</span><br><span class=\"line\">      &quot;&lt;script lang&#x3D;\\&quot;ts\\&quot;&gt;\\nimport&#123;Component,Vue&#125;from &#39;vue-property-decorator&#39;;\\n\\n@Component(&#123;\\n$0\\n&#125;)\\nexport default class $&#123;1:ClassName&#125; extends Vue&#123;\\n$0\\n&#125;\\n&lt;&#x2F;script&gt;\\n\\n&quot;,</span><br><span class=\"line\">      &quot;&lt;style lang&#x3D;\\&quot;scss\\&quot; scope&gt;\\n\\n&lt;&#x2F;style&gt;&quot;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    &quot;description&quot;: &quot;生成vue文件&quot;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>",
            "tags": [
                "vscode"
            ]
        },
        {
            "id": "http://example.com/2021/01/14/fronted/CSS/20210114/",
            "url": "http://example.com/2021/01/14/fronted/CSS/20210114/",
            "title": "css——使用全局变量设置主题颜色",
            "date_published": "2021-01-13T16:00:00.000Z",
            "content_html": "<h2 id=\"变量的声明\"><a class=\"markdownIt-Anchor\" href=\"#变量的声明\">#</a> 变量的声明</h2>\n<pre><code>CSS变量声明是字母前加两个横线（--）\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">body&#123;</span><br><span class=\"line\">  　　--Colors:#dfdfdf;</span><br><span class=\"line\">  　　--fS16px:16px;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</code></pre>\n<h2 id=\"使用变量\"><a class=\"markdownIt-Anchor\" href=\"#使用变量\">#</a> 使用变量</h2>\n<ul>\n<li>var 函数用来读取变量  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a&#123;</span><br><span class=\"line\">  color:var(--Colors);     </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>var () 函数还可以使用第二个参数，表示变量的默认值。如果该变量不存在，就会使用这个默认值.  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">color: var(--Colors, #e5e5e5);</span><br></pre></td></tr></table></figure></li>\n</ul>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2021/01/14/fronted/CSS/%E5%86%85%E5%AE%B9%E6%BB%9A%E5%8A%A8/",
            "url": "http://example.com/2021/01/14/fronted/CSS/%E5%86%85%E5%AE%B9%E6%BB%9A%E5%8A%A8/",
            "title": "css 中div不用设定高度，自动根据内容出现滚动条",
            "date_published": "2021-01-13T16:00:00.000Z",
            "content_html": "<h2 id=\"css-中div不用设定高度自动根据内容出现滚动条\"><a class=\"markdownIt-Anchor\" href=\"#css-中div不用设定高度自动根据内容出现滚动条\">#</a> css 中 div 不用设定高度，自动根据内容出现滚动条</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.parent&#123;</span><br><span class=\"line\">  position:relative;</span><br><span class=\"line\">  height:100%;&#x2F;&#x2F;高度根据需求自行设定</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.child&#123;</span><br><span class=\"line\">  position:absolute;</span><br><span class=\"line\">  left:0;</span><br><span class=\"line\">  top:0;</span><br><span class=\"line\">  right:0;</span><br><span class=\"line\">  bottom:0; &#x2F;&#x2F;left,top,right,bottom都为0，充满真个页面</span><br><span class=\"line\">  overflow-y:auto;</span><br><span class=\"line\">  overflow-x:hidden; &#x2F;&#x2F;设置Y轴出现滚动条，X轴隐藏</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>",
            "tags": [
                "CSS"
            ]
        },
        {
            "id": "http://example.com/2021/01/08/fronted/CSS/%E9%A1%B5%E9%9D%A2%E6%89%93%E5%8D%B0%E6%98%BE%E7%A4%BA%E9%A1%B5%E7%9C%89%E9%A1%B5%E8%84%9A/",
            "url": "http://example.com/2021/01/08/fronted/CSS/%E9%A1%B5%E9%9D%A2%E6%89%93%E5%8D%B0%E6%98%BE%E7%A4%BA%E9%A1%B5%E7%9C%89%E9%A1%B5%E8%84%9A/",
            "title": "前端页面打印需要每一页需要展示页眉页脚?",
            "date_published": "2021-01-07T16:00:00.000Z",
            "content_html": "",
            "tags": [
                "Html CSS"
            ]
        },
        {
            "id": "http://example.com/2020/12/30/fronted/TypeScript/interface/",
            "url": "http://example.com/2020/12/30/fronted/TypeScript/interface/",
            "title": "接口interface",
            "date_published": "2020-12-29T16:00:00.000Z",
            "content_html": "<h2 id=\"接口interface\"><a class=\"markdownIt-Anchor\" href=\"#接口interface\">#</a> 接口 interface</h2>\n<p><code>接口的作用就是为这些类型命名和为你的代码或第三方代码定义契约。</code></p>\n<h2 id=\"示例\"><a class=\"markdownIt-Anchor\" href=\"#示例\">#</a> 示例</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface LabelledValue &#123;</span><br><span class=\"line\">  label: string;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function printLabel(labelledObj:LabelledValue) &#123;</span><br><span class=\"line\">  console.log(labelledObj.label)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">et myObj &#x3D; &#123;size: 10, label: &quot;Size 10 Object&quot;&#125;;</span><br><span class=\"line\">printLabel(myObj);</span><br></pre></td></tr></table></figure>",
            "tags": []
        },
        {
            "id": "http://example.com/2020/12/24/fronted/vscode/format/",
            "url": "http://example.com/2020/12/24/fronted/vscode/format/",
            "title": "vscode 格式化",
            "date_published": "2020-12-24T07:45:00.000Z",
            "content_html": "<h1 id=\"vscode-格式化\"><a class=\"markdownIt-Anchor\" href=\"#vscode-格式化\">#</a> vscode 格式化</h1>\n<h2 id=\"需要下载的插件\"><a class=\"markdownIt-Anchor\" href=\"#需要下载的插件\">#</a> 需要下载的插件</h2>\n<pre><code>Vetur和Prettier\n</code></pre>\n<h2 id=\"vscode-中-settingjson\"><a class=\"markdownIt-Anchor\" href=\"#vscode-中-settingjson\">#</a> vscode 中 setting.json</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &#x2F;&#x2F; vscode默认启用了根据文件类型自动设置tabsize的选项</span><br><span class=\"line\">  &quot;editor.detectIndentation&quot;: false,</span><br><span class=\"line\">  &#x2F;&#x2F; 重新设定tabsize</span><br><span class=\"line\">  &quot;editor.tabSize&quot;: 2,</span><br><span class=\"line\">  &#x2F;&#x2F; #每次保存的时候自动格式化</span><br><span class=\"line\">  &quot;editor.formatOnSave&quot;: true,</span><br><span class=\"line\">  &#x2F;&#x2F; &#x2F;&#x2F; #每次保存的时候将代码按eslint格式进行修复</span><br><span class=\"line\">  &#x2F;&#x2F; &quot;eslint.autoFixOnSave&quot;: true,</span><br><span class=\"line\">  &#x2F;&#x2F; &#x2F;&#x2F; 添加 vue 支持</span><br><span class=\"line\">  &#x2F;&#x2F; &quot;eslint.validate&quot;: [</span><br><span class=\"line\">  &#x2F;&#x2F;   &quot;javascript&quot;,</span><br><span class=\"line\">  &#x2F;&#x2F;   &quot;javascriptreact&quot;,</span><br><span class=\"line\">  &#x2F;&#x2F;   &#123;</span><br><span class=\"line\">  &#x2F;&#x2F;     &quot;language&quot;: &quot;vue&quot;,</span><br><span class=\"line\">  &#x2F;&#x2F;     &quot;autoFix&quot;: true</span><br><span class=\"line\">  &#x2F;&#x2F;   &#125;</span><br><span class=\"line\">  &#x2F;&#x2F; ],</span><br><span class=\"line\">  &#x2F;&#x2F; &#x2F;&#x2F;  #让prettier使用eslint的代码格式进行校验</span><br><span class=\"line\">  &#x2F;&#x2F; &quot;prettier.eslintIntegration&quot;: true,</span><br><span class=\"line\">  &#x2F;&#x2F;  #去掉代码结尾的分号</span><br><span class=\"line\">  &quot;prettier.semi&quot;: false,</span><br><span class=\"line\">  &#x2F;&#x2F;  #使用带引号替代双引号</span><br><span class=\"line\">  &quot;prettier.singleQuote&quot;: true,</span><br><span class=\"line\">  &#x2F;&#x2F;  #让函数(名)和后面的括号之间加个空格</span><br><span class=\"line\">  &quot;javascript.format.insertSpaceBeforeFunctionParenthesis&quot;: true,</span><br><span class=\"line\">  &#x2F;&#x2F; #这个按用户自身习惯选择</span><br><span class=\"line\">  &quot;vetur.format.defaultFormatter.html&quot;: &quot;js-beautify-html&quot;,</span><br><span class=\"line\">  &#x2F;&#x2F; #让vue中的js按编辑器自带的ts格式进行格式化</span><br><span class=\"line\">  &quot;vetur.format.defaultFormatter.js&quot;: &quot;vscode-typescript&quot;,</span><br><span class=\"line\">  &quot;vetur.format.defaultFormatterOptions&quot;: &#123;</span><br><span class=\"line\">    &quot;js-beautify-html&quot;: &#123;</span><br><span class=\"line\">      &quot;wrap_attributes&quot;: &quot;auto&quot;</span><br><span class=\"line\">      &#x2F;&#x2F; #vue组件中html代码格式化样式</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &quot;prettier&quot;: &#123;</span><br><span class=\"line\">      &quot;semi&quot;: true,</span><br><span class=\"line\">      &#x2F;&#x2F; &quot;singleQuote&quot;: true</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#x2F;&#x2F; &#x2F;&#x2F; 格式化stylus, 需安装Manta&#39;s Stylus Supremacy插件</span><br><span class=\"line\">  &#x2F;&#x2F; &quot;stylusSupremacy.insertColons&quot;: false, &#x2F;&#x2F; 是否插入冒号</span><br><span class=\"line\">  &#x2F;&#x2F; &quot;stylusSupremacy.insertSemicolons&quot;: false, &#x2F;&#x2F; 是否插入分好</span><br><span class=\"line\">  &#x2F;&#x2F; &quot;stylusSupremacy.insertBraces&quot;: false, &#x2F;&#x2F; 是否插入大括号</span><br><span class=\"line\">  &#x2F;&#x2F; &quot;stylusSupremacy.insertNewLineAroundImports&quot;: false, &#x2F;&#x2F; import之后是否换行</span><br><span class=\"line\">  &#x2F;&#x2F; &quot;stylusSupremacy.insertNewLineAroundBlocks&quot;: false,</span><br><span class=\"line\">  &quot;editor.codeActionsOnSave&quot;: &#123;</span><br><span class=\"line\">    &quot;source.fixAll.eslint&quot;: true</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;[vue]&quot;: &#123;</span><br><span class=\"line\">    &quot;editor.defaultFormatter&quot;: &quot;esbenp.prettier-vscode&quot;</span><br><span class=\"line\">  &#125; &#x2F;&#x2F; 两个选择器中是否换行</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "vscode"
            ]
        },
        {
            "id": "http://example.com/2020/12/23/hexo-blog/feedback/",
            "url": "http://example.com/2020/12/23/hexo-blog/feedback/",
            "title": "shoka主题 添加评论功能",
            "date_published": "2020-12-22T16:00:00.000Z",
            "content_html": "<h1 id=\"shoka主题-添加评论功能\"><a class=\"markdownIt-Anchor\" href=\"#shoka主题-添加评论功能\">#</a> shoka 主题 添加评论功能</h1>\n<span id=\"more\"></span>\n<h2 id=\"开启评论配置\"><a class=\"markdownIt-Anchor\" href=\"#开启评论配置\">#</a> 开启评论配置</h2>\n<pre><code>+ 安装好 hexo-symbols-count-time 插件后，不需要修改站点配置文件，直接使用插件默认配置就行。\n+ 需要修改主题配置文件，找到两处 cout ，修改为 true ：\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 页尾全站统计</span><br><span class=\"line\">footer:</span><br><span class=\"line\">  since: 2010</span><br><span class=\"line\">  count: true</span><br><span class=\"line\"></span><br><span class=\"line\"># 文章界面统计</span><br><span class=\"line\">post:</span><br><span class=\"line\">  count: true</span><br></pre></td></tr></table></figure>\n</code></pre>\n<h2 id=\"开启valine\"><a class=\"markdownIt-Anchor\" href=\"#开启valine\">#</a> 开启 Valine</h2>\n<p>我们的评论系统其实是放在<mark> Leancloud 上</mark>的，因此首先需要去注册一个账号 <a href=\"https:leancloud.cn\">点我注册</a></p>\n<ul>\n<li>注册完以后需要创建一个应用，名字可以随便起，然后 进入应用 -&gt; 设置 -&gt; 应用 key , 获取你的 appid 和 appkey</li>\n<li>打开 shoka 主题配置文件 (_config.yml), 搜索 valine，填入<mark> appid</mark> 和 <mark>appkey</mark></li>\n<li>在 Leancloud -&gt; 设置 -&gt; 安全中心 -&gt; Web 安全域名 把你的域名加进去🎉结束撒花～</li>\n</ul>\n<h2 id=\"文章关闭评论权限\"><a class=\"markdownIt-Anchor\" href=\"#文章关闭评论权限\">#</a> 文章关闭评论权限</h2>\n<pre><code>如果某一篇文章需要关闭评论功能，则在文章 Front Matter 中配置：\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: 关闭评论</span><br><span class=\"line\">comment: false</span><br><span class=\"line\">---</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></code></pre>\n",
            "tags": [
                "Hexo"
            ]
        },
        {
            "id": "http://example.com/2020/12/23/hexo-blog/hexo%E6%8C%87%E4%BB%A4/",
            "url": "http://example.com/2020/12/23/hexo-blog/hexo%E6%8C%87%E4%BB%A4/",
            "title": "Hexo相关指令",
            "date_published": "2020-12-22T16:00:00.000Z",
            "content_html": "<h2 id=\"新建一篇文章\"><a class=\"markdownIt-Anchor\" href=\"#新建一篇文章\">#</a> 新建一篇文章</h2>\n<pre><code>hexo new &quot;文章名称&quot;\n</code></pre>\n<h2 id=\"启动服务器-默认情况下访问网址为-httplocalhost4000\"><a class=\"markdownIt-Anchor\" href=\"#启动服务器-默认情况下访问网址为-httplocalhost4000\">#</a> 启动服务器。默认情况下，访问网址为： <a href=\"http://localhost:4000/%E3%80%82\">http://localhost:4000/。</a></h2>\n<pre><code>hexo s\n</code></pre>\n<h2 id=\"部署\"><a class=\"markdownIt-Anchor\" href=\"#部署\">#</a> 部署</h2>\n<ul>\n<li>清除缓存文件 (db.json) 和已生成的静态文件 (public)。<br>\nhexo clean</li>\n<li>生成静态文件。<br>\nhexo g</li>\n<li>部署网站。部署之前预先生成静态文件，执行第二步 hexo g<br>\nhexo d</li>\n</ul>\n",
            "tags": [
                "Hexo"
            ]
        },
        {
            "id": "http://example.com/2020/12/23/fronted/TypeScript/function/",
            "url": "http://example.com/2020/12/23/fronted/TypeScript/function/",
            "title": "函数Function",
            "date_published": "2020-12-22T16:00:00.000Z",
            "content_html": "<h2 id=\"一般函数\"><a class=\"markdownIt-Anchor\" href=\"#一般函数\">#</a> 一般函数</h2>\n<h3 id=\"语法\"><a class=\"markdownIt-Anchor\" href=\"#语法\">#</a> 语法</h3>\n<p><code>function 函数名(): 返回值类型&#123;&#125;</code> <br>\n<mark> 必须定义返回值 没有返回值 定义为 void</mark></p>\n<h3 id=\"示例\"><a class=\"markdownIt-Anchor\" href=\"#示例\">#</a> 示例</h3>\n<p><mark>形参和实参的类型和数量必须一致</mark></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function jumpSan(param1, parm2) &#123;</span><br><span class=\"line\">  console.log(&quot;\\u5144\\u5F1F\\u4EEC,\\u8DF3&quot; + params + &quot;,\\u897F\\u5317\\u65B9&quot; + parm2 + &quot;\\u7C73&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">jumpSan(&#39;P城&#39;, 100);</span><br></pre></td></tr></table></figure>\n<h2 id=\"可选参数的函数\"><a class=\"markdownIt-Anchor\" href=\"#可选参数的函数\">#</a> 可选参数的函数</h2>\n<h3 id=\"语法-2\"><a class=\"markdownIt-Anchor\" href=\"#语法-2\">#</a> 语法</h3>\n<ul>\n<li>function 函数名 (形参 1: 数据类型 = 默认值 1, 形参 2: 数据类型 = 默认值 2): 返回值类型 {}</li>\n<li>传参:\n<ul>\n<li>函数名 (参数 1)</li>\n<li>函数名 (参数 1, 参数 2)</li>\n<li>函数名 (undefined, 参数 2)</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"示例-2\"><a class=\"markdownIt-Anchor\" href=\"#示例-2\">#</a> 示例</h3>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function buyGuns(params, param2, cont) &#123;</span><br><span class=\"line\">  if (cont &#x3D;&#x3D;&#x3D; void 0) &#123; cont &#x3D; 0; &#125;</span><br><span class=\"line\">  console.log(&quot;\\u4E70&quot; + cont + &quot;\\u628A&quot; + params + &quot;,&quot; + param2);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">buyGuns(&#39;ak47&#39;, &#39;m416&#39;, 10);</span><br></pre></td></tr></table></figure>\n<h2 id=\"参数数量不确定的函数\"><a class=\"markdownIt-Anchor\" href=\"#参数数量不确定的函数\">#</a> 参数数量不确定的函数</h2>\n<h3 id=\"语法-3\"><a class=\"markdownIt-Anchor\" href=\"#语法-3\">#</a> 语法</h3>\n<p>function 函数名 (形参 1: 类型，形参 2: 类型，… 形参 3: 类型 []):void {}<br>\n<mark> 特点：只能定义有一个 只能定义为数组 只能定义在形参最后</mark></p>\n<h3 id=\"示例-3\"><a class=\"markdownIt-Anchor\" href=\"#示例-3\">#</a> 示例</h3>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function add(x, y) &#123;</span><br><span class=\"line\">    var resnumber &#x3D; [];</span><br><span class=\"line\">    for (var _i &#x3D; 2; _i &lt; arguments.length; _i++) &#123;</span><br><span class=\"line\">        resnumber[_i - 2] &#x3D; arguments[_i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &#x2F;&#x2F; 创建一个求和变量</span><br><span class=\"line\">    var sum &#x3D; x + y;</span><br><span class=\"line\">    &#x2F;&#x2F; 使用for of语法 循环剩余参数</span><br><span class=\"line\">    for (var _a &#x3D; 0, resnumber_1 &#x3D; resnumber; _a &lt; resnumber_1.length; _a++) &#123;</span><br><span class=\"line\">        var item &#x3D; resnumber_1[_a];</span><br><span class=\"line\">        sum +&#x3D; item;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    console.log(&#39;和&#x3D;&#x3D;&#x3D;&#39;, sum);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">add(1, 2);</span><br><span class=\"line\">add(1, 2, 3, 4, 5, 6, 7);</span><br></pre></td></tr></table></figure>",
            "tags": []
        },
        {
            "id": "http://example.com/2020/12/22/fronted/TypeScript/enum/",
            "url": "http://example.com/2020/12/22/fronted/TypeScript/enum/",
            "title": "枚举Enum",
            "date_published": "2020-12-21T16:00:00.000Z",
            "content_html": "<h2 id=\"枚举-enum\"><a class=\"markdownIt-Anchor\" href=\"#枚举-enum\">#</a> 枚举 enum</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">enum Gender &#123;</span><br><span class=\"line\">  Boy &#x3D; 1,</span><br><span class=\"line\">  Girl &#x3D; 2,</span><br><span class=\"line\">  Unknown &#x3D; 3,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(Gender.Boy)</span><br><span class=\"line\">console.log(Gender.Girl)</span><br><span class=\"line\">console.log(Gender.Unknown)</span><br><span class=\"line\"></span><br><span class=\"line\">let useSex: Gender &#x3D; Gender.Boy</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(useSex) &#x2F;&#x2F; 1</span><br></pre></td></tr></table></figure>",
            "tags": []
        },
        {
            "id": "http://example.com/2020/12/22/fronted/JavaScript/review1222/",
            "url": "http://example.com/2020/12/22/fronted/JavaScript/review1222/",
            "title": "地址栏输入url 发生了什么",
            "date_published": "2020-12-21T16:00:00.000Z",
            "content_html": "<h2 id=\"地址栏输入url-发生了什么\"><a class=\"markdownIt-Anchor\" href=\"#地址栏输入url-发生了什么\">#</a> 地址栏输入 url 发生了什么？</h2>\n<ul>\n<li>首先会进行 url 解析，根据 dns 系统进行 ip 查找</li>\n<li>根据 ip 就可以找到服务器，然后浏览器和服务器会进行 TCP 三次握手建立连接，如果此时是 https 的话，还会建立 TLS 连接以及加密算法.</li>\n<li>连接建立后浏览器开始发送请求获取文件，此时这里还会出现一种情况就是缓存，建立连接后是走缓存还是直接重新获取，需要看后台的设置，所以这里会有一个关注的问题 &quot;浏览器缓存机制&quot;. 现在我们当没有缓存，直接获取文件</li>\n<li>首先获取 HTML 文件，构建 DOM 树，这个过程是边下载边解析，并不是等 HTML 文件全部下载完成，再去解析，这样比较浪费时间，而是下载一点解析一点.</li>\n<li>解析到头部的时候，又会出现一种问题，css,js 放在哪里？不同的位置会造成渲染的不同，此时就会出现另一个需要关注的问题 &quot;css,js 位置应该放哪里？为什么&quot;，我们先按照正确的位置来说明 (css 放头部，js 放尾部).</li>\n<li>解析到了 html 头部发现有 css 文件，此时下载 css 文件，css 文件也是一边下载一边解析的，构建的是 CSSOM 树，当 DOM 树和 CSSOM 树全部构建完之后，浏览器会把 DOM 树和 CSSOM 树构建成渲染树。</li>\n<li>样式计算，上面最后一句 &quot;DOM 树和 CSSOM 树会一起构建成渲染树&quot; 说的有点笼统，其实还有更细一点的操作，但是一般回答到上面应该就可以了，我们现在接上面说一下构造渲染树的时候还做了哪些事情。第一个就是样式计算，DOM 树 和 CSSOM 树有了之后，浏览器开始样式计算，主要是为 DOM 树上的节点找到对应的样式。</li>\n<li>构建布局树，样式计算完之后就开始构建布局树。主要是为 DOM 树上的节点找到页面上对应位置以及一些 &quot;display:none&quot; 元素的隐藏。</li>\n<li>构建分层树，布局树完成后浏览器还需要建立分层树，主要是为了满足滚动条，z-index，position 这些复杂的分层操作</li>\n<li>将分层树图块化，利用光栅找到视图窗口下的对应的位图。主要是因为一个页面可能有几屏那么长，一下渲染出来比较浪费，所以浏览器会找到视图窗口对应的图块，将这部分的图块进行渲染</li>\n<li>最终渲染进程将整个页面渲染出来，在渲染的过程中会还出现重排和重绘，这也是比较爱问的问题 &quot;重排重绘为什么会影响渲染，如何避免？&quot;</li>\n<li>以上过程大概讲解了一下从 url 到页面渲染的整个过程</li>\n</ul>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2020/12/22/fronted/TypeScript/ts-class/",
            "url": "http://example.com/2020/12/22/fronted/TypeScript/ts-class/",
            "title": "类Class",
            "date_published": "2020-12-21T16:00:00.000Z",
            "content_html": "<h2 id=\"class\"><a class=\"markdownIt-Anchor\" href=\"#class\">#</a> Class</h2>\n<ul>\n<li>封装</li>\n<li>继承</li>\n<li>多态</li>\n</ul>\n<h2 id=\"回顾以前创建对象方法\"><a class=\"markdownIt-Anchor\" href=\"#回顾以前创建对象方法\">#</a> 回顾以前创建对象方法</h2>\n<pre><code>构造函数 + new\n</code></pre>\n<h2 id=\"class创建对象\"><a class=\"markdownIt-Anchor\" href=\"#class创建对象\">#</a> Class 创建对象</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Animal &#123;</span><br><span class=\"line\">  name: string;</span><br><span class=\"line\">  constructor(theName: string) &#123; this.name &#x3D; theName; &#125;</span><br><span class=\"line\">  move(distanceInMeters: number &#x3D; 0) &#123;</span><br><span class=\"line\">    console.log(&#96;$&#123;this.name&#125; moved $&#123;distanceInMeters&#125;m.&#96;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"类的继承\"><a class=\"markdownIt-Anchor\" href=\"#类的继承\">#</a> 类的继承</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Snake extends Animal &#123;</span><br><span class=\"line\">  constructor(name: string) &#123; super(name); &#125;</span><br><span class=\"line\">  move(distanceInMeters &#x3D; 5) &#123;</span><br><span class=\"line\">    console.log(&quot;Slithering...&quot;);</span><br><span class=\"line\">    super.move(distanceInMeters);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Horse extends Animal &#123;</span><br><span class=\"line\">  constructor(name: string) &#123; super(name); &#125;</span><br><span class=\"line\">  move(distanceInMeters &#x3D; 45) &#123;</span><br><span class=\"line\">    console.log(&quot;Galloping...&quot;);</span><br><span class=\"line\">    super.move(distanceInMeters);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"实例化-调用\"><a class=\"markdownIt-Anchor\" href=\"#实例化-调用\">#</a> 实例化 调用</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let sam &#x3D; new Snake(&quot;Sammy the Python&quot;);</span><br><span class=\"line\">let tom: Animal &#x3D; new Horse(&quot;Tommy the Palomino&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">sam.move();</span><br><span class=\"line\">tom.move(34);</span><br></pre></td></tr></table></figure>\n<h2 id=\"code-practice\"><a class=\"markdownIt-Anchor\" href=\"#code-practice\">#</a> code practice</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class City &#123;</span><br><span class=\"line\">  cname:string;</span><br><span class=\"line\">  clevel:number;</span><br><span class=\"line\">  constructor(cname:string,clevel:number)&#123;</span><br><span class=\"line\">    this.cname &#x3D; cname;</span><br><span class=\"line\">    this.clevel &#x3D; clevel;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  about()&#123;</span><br><span class=\"line\">    console.log(&#96;欢迎来到$&#123;this.cname&#125;,危险系数为$&#123;this.clevel&#125;&#96;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 创建对象</span><br><span class=\"line\">let c1 &#x3D; new City(&#39;p城&#39;,5);</span><br><span class=\"line\">console.log(c1.cname);</span><br><span class=\"line\">c1.about();</span><br></pre></td></tr></table></figure>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2020/12/22/fronted/Vue/20201222/",
            "url": "http://example.com/2020/12/22/fronted/Vue/20201222/",
            "title": "vue-mixins的理解和简单使用",
            "date_published": "2020-12-21T16:00:00.000Z",
            "content_html": "<h3 id=\"via\"><a class=\"markdownIt-Anchor\" href=\"#via\">#</a> via</h3>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">作者：老鼠AI大米_Java全栈</span><br><span class=\"line\">链接：https:&#x2F;&#x2F;www.jianshu.com&#x2F;p&#x2F;a72bf060eeaa</span><br><span class=\"line\">来源：简书</span><br><span class=\"line\">著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</span><br></pre></td></tr></table></figure>\n<h3 id=\"作用\"><a class=\"markdownIt-Anchor\" href=\"#作用\">#</a> 作用</h3>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vue中提供了一种混合机制--mixins，用来更高效的实现组件内容的复用。</span><br></pre></td></tr></table></figure>\n<h3 id=\"理解\"><a class=\"markdownIt-Anchor\" href=\"#理解\">#</a> 理解</h3>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">组件在引用之后相当于在父组件内开辟了一块单独的空间，来根据父组件props过来的值进行相应的操作，单本质上两者还是泾渭分明，相对独立。</span><br><span class=\"line\"></span><br><span class=\"line\">而mixins则是在引入组件之后，则是将组件内部的内容如data等方法、method等属性与父组件相应内容进行合并。</span><br><span class=\"line\">相当于在引入后，父组件的各种属性方法都被扩充了。</span><br></pre></td></tr></table></figure>\n<ul>\n<li>单纯组件引用：<br>\n<strong>父组件 + 子组件 &gt;&gt;&gt; 父组件 + 子组件</strong></li>\n<li>mixins：<br>\n<strong>父组件 + 子组件 &gt;&gt;&gt; new 父组件</strong></li>\n</ul>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">有点像注册了一个vue的公共方法，可以绑定在多个组件或者多个Vue对象实例中使用。</span><br><span class=\"line\">另一点，类似于在原型对象中注册方法，实例对象即组件或者Vue实例对象中，仍然可以定义相同函数名的方法进行覆盖，有点像子类和父类的感觉。</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用\"><a class=\"markdownIt-Anchor\" href=\"#使用\">#</a> 使用</h3>\n<ul>\n<li>\n<p>方法的复用</p>\n<p><strong>HTML</strong></p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">    &lt;child&gt;&lt;&#x2F;child&gt;</span><br><span class=\"line\">    &lt;kid&gt;&lt;&#x2F;kid&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>\n<p><strong>js</strong></p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> Vue.component(&#39;child&#39;,&#123;</span><br><span class=\"line\">    template:&#96;&lt;h1 @click&#x3D;&quot;foo&quot;&gt;child component&lt;&#x2F;h1&gt;&#96;,</span><br><span class=\"line\">    methods:&#123;</span><br><span class=\"line\">        foo()&#123;</span><br><span class=\"line\">            console.log(&#39;Child foo()&#39;+this.msg++)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.component(&#39;kid&#39;,&#123;</span><br><span class=\"line\">    template:&#96;&lt;h1 @click&#x3D;&quot;foo&quot;&gt;kid component&lt;&#x2F;h1&gt;&#96;,</span><br><span class=\"line\">    methods:&#123;</span><br><span class=\"line\">        foo()&#123;</span><br><span class=\"line\">            console.log(&#39;Kid foo()&#39;+this.msg++)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2020/01/08/fronted/vscode/%E6%8F%92%E4%BB%B6/",
            "url": "http://example.com/2020/01/08/fronted/vscode/%E6%8F%92%E4%BB%B6/",
            "title": "自用插件",
            "date_published": "2020-01-08T07:37:00.000Z",
            "content_html": "<h2 id=\"any-rule\"><a class=\"markdownIt-Anchor\" href=\"#any-rule\">#</a> any-rule</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ctrl+shift+p调出工具栏</span><br><span class=\"line\">再输入zz</span><br></pre></td></tr></table></figure>\n<h2 id=\"image-preview\"><a class=\"markdownIt-Anchor\" href=\"#image-preview\">#</a> Image preview</h2>\n<pre><code>预览图片\n</code></pre>\n<h2 id=\"git-history\"><a class=\"markdownIt-Anchor\" href=\"#git-history\">#</a> Git History</h2>\n<pre><code>查看git历史\n</code></pre>\n<h2 id=\"chinese\"><a class=\"markdownIt-Anchor\" href=\"#chinese\">#</a> chinese</h2>\n<pre><code>vscode 汉化插件\n</code></pre>\n<h2 id=\"未完待续\"><a class=\"markdownIt-Anchor\" href=\"#未完待续\">#</a> 未完待续</h2>\n",
            "tags": [
                "vscode"
            ]
        },
        {
            "id": "http://example.com/2020/01/08/fronted/markdown/usage/",
            "url": "http://example.com/2020/01/08/fronted/markdown/usage/",
            "title": "markdown语法积累",
            "date_published": "2020-01-08T07:37:00.000Z",
            "content_html": "<h2 id=\"高亮\"><a class=\"markdownIt-Anchor\" href=\"#高亮\">#</a> 高亮</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x3D;&#x3D;高亮&#x3D;&#x3D;</span><br></pre></td></tr></table></figure>\n<p><mark>高亮</mark></p>\n<h2 id=\"链接\"><a class=\"markdownIt-Anchor\" href=\"#链接\">#</a> 链接</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">我的博客&lt;xyingwei.github.io&gt;</span><br></pre></td></tr></table></figure>\n<p><mark>我的博客 &lt;<a href=\"http://xyingwei.github.io\">xyingwei.github.io</a>&gt;</mark></p>\n<h2 id=\"链接2\"><a class=\"markdownIt-Anchor\" href=\"#链接2\">#</a> 链接 2</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[我的博客](xyingwei.github.io)</span><br></pre></td></tr></table></figure>\n<p><mark><a href=\"xyingwei.github.io\">我的博客</a></mark></p>\n",
            "tags": [
                "markdown"
            ]
        },
        {
            "id": "http://example.com/2020/01/08/fronted/Vue/20210108/",
            "url": "http://example.com/2020/01/08/fronted/Vue/20210108/",
            "title": "键盘enter事件的使用",
            "date_published": "2020-01-07T16:00:00.000Z",
            "content_html": "<h2 id=\"示例\"><a class=\"markdownIt-Anchor\" href=\"#示例\">#</a> 示例</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@keyup.native.enter&#x3D;&quot;search&quot;</span><br></pre></td></tr></table></figure>",
            "tags": []
        }
    ]
}