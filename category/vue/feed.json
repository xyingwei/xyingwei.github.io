{
    "version": "https://jsonfeed.org/version/1",
    "title": "徐爸爸是超人 • All posts by \"vue\" category",
    "description": "",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2022/01/19/fronted/Vue/%E7%BA%BF%E4%B8%8A%E7%8E%AF%E5%A2%83%E5%BC%80%E5%90%AFvue%E5%B7%A5%E5%85%B7/",
            "url": "http://example.com/2022/01/19/fronted/Vue/%E7%BA%BF%E4%B8%8A%E7%8E%AF%E5%A2%83%E5%BC%80%E5%90%AFvue%E5%B7%A5%E5%85%B7/",
            "title": "开启vue2 production调试的方法",
            "date_published": "2022-01-18T16:00:00.000Z",
            "content_html": "<h2 id=\"开启vue2-production调试的方法\"><a href=\"#开启vue2-production调试的方法\" class=\"headerlink\" title=\"开启vue2 production调试的方法\"></a>开启vue2 production调试的方法</h2><ol>\n<li>找vue实例，可以说99%的应用是用的app.<strong>vue</strong>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;如果实在找不到,那么就到找到任意组件，用组件元素.__vue__.$root来获取 </span><br><span class=\"line\">var vue &#x3D; app.__vue__ </span><br></pre></td></tr></table></figure></li>\n<li>vue构造函数  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var constructor &#x3D; vue.__proto__.constructor </span><br></pre></td></tr></table></figure></li>\n<li>Vue有多级，要找到最顶级的 <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var Vue &#x3D; constructor; </span><br><span class=\"line\"></span><br><span class=\"line\">while(Vue.super)&#123; </span><br><span class=\"line\">Vue &#x3D; Vue.super </span><br><span class=\"line\"></span><br><span class=\"line\">&#125; </span><br><span class=\"line\">console.log(Vue)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n<li>找到config，并且把devtools设置成true <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.config.devtools &#x3D; true; </span><br></pre></td></tr></table></figure></li>\n<li>注册到Vue DevTool上 <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var hook &#x3D; window.__VUE_DEVTOOLS_GLOBAL_HOOK__ </span><br><span class=\"line\">hook.emit(&#39;init&#39;,Vue) </span><br></pre></td></tr></table></figure></li>\n<li>如果有vuex store，也注册<br> ==这部分代码参考了<a href=\"https://blog.csdn.net/weixin_34352449/article/details/91466542\">https://blog.csdn.net/weixin_34352449/article/details/91466542</a>== <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if(vue.$store)&#123; </span><br><span class=\"line\">var store &#x3D; vue.$store; </span><br><span class=\"line\">    store._devtoolHook &#x3D; hook; </span><br><span class=\"line\">    hook.emit(&#39;vuex:init&#39;, store); </span><br><span class=\"line\">    hook.on(&#39;vuex:travel-to-state&#39;,function(targetState)&#123; </span><br><span class=\"line\">        store.replaceState(targetState); </span><br><span class=\"line\">    &#125;); </span><br><span class=\"line\">    store.subscribe(function(mutation, state)&#123; </span><br><span class=\"line\">        hook.emit(&#39;vuex:mutation&#39;, mutation, state); </span><br><span class=\"line\">    &#125;); </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2020/12/22/fronted/Vue/20201222/",
            "url": "http://example.com/2020/12/22/fronted/Vue/20201222/",
            "title": "vue-mixins的理解和简单使用",
            "date_published": "2020-12-21T16:00:00.000Z",
            "content_html": "<h3 id=\"via\"><a href=\"#via\" class=\"headerlink\" title=\"via\"></a>via</h3>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">作者：老鼠AI大米_Java全栈</span><br><span class=\"line\">链接：https:&#x2F;&#x2F;www.jianshu.com&#x2F;p&#x2F;a72bf060eeaa</span><br><span class=\"line\">来源：简书</span><br><span class=\"line\">著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</span><br></pre></td></tr></table></figure>\n<h3 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h3>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vue中提供了一种混合机制--mixins，用来更高效的实现组件内容的复用。</span><br></pre></td></tr></table></figure>\n<h3 id=\"理解\"><a href=\"#理解\" class=\"headerlink\" title=\"理解\"></a>理解</h3>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">组件在引用之后相当于在父组件内开辟了一块单独的空间，来根据父组件props过来的值进行相应的操作，单本质上两者还是泾渭分明，相对独立。</span><br><span class=\"line\"></span><br><span class=\"line\">而mixins则是在引入组件之后，则是将组件内部的内容如data等方法、method等属性与父组件相应内容进行合并。</span><br><span class=\"line\">相当于在引入后，父组件的各种属性方法都被扩充了。</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>单纯组件引用：<br><strong>父组件 + 子组件 &gt;&gt;&gt; 父组件 + 子组件</strong></p>\n</li>\n<li><p>mixins：<br><strong>父组件 + 子组件 &gt;&gt;&gt; new父组件</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">有点像注册了一个vue的公共方法，可以绑定在多个组件或者多个Vue对象实例中使用。</span><br><span class=\"line\">另一点，类似于在原型对象中注册方法，实例对象即组件或者Vue实例对象中，仍然可以定义相同函数名的方法进行覆盖，有点像子类和父类的感觉。</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3></li>\n<li><p>方法的复用</p>\n<p>  <strong>HTML</strong></p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">    &lt;child&gt;&lt;&#x2F;child&gt;</span><br><span class=\"line\">    &lt;kid&gt;&lt;&#x2F;kid&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>\n<p>   <strong>js</strong></p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> Vue.component(&#39;child&#39;,&#123;</span><br><span class=\"line\">    template:&#96;&lt;h1 @click&#x3D;&quot;foo&quot;&gt;child component&lt;&#x2F;h1&gt;&#96;,</span><br><span class=\"line\">    methods:&#123;</span><br><span class=\"line\">        foo()&#123;</span><br><span class=\"line\">            console.log(&#39;Child foo()&#39;+this.msg++)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.component(&#39;kid&#39;,&#123;</span><br><span class=\"line\">    template:&#96;&lt;h1 @click&#x3D;&quot;foo&quot;&gt;kid component&lt;&#x2F;h1&gt;&#96;,</span><br><span class=\"line\">    methods:&#123;</span><br><span class=\"line\">        foo()&#123;</span><br><span class=\"line\">            console.log(&#39;Kid foo()&#39;+this.msg++)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n\n</li>\n</ul>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2020/01/08/fronted/Vue/20210108/",
            "url": "http://example.com/2020/01/08/fronted/Vue/20210108/",
            "title": "键盘enter事件的使用",
            "date_published": "2020-01-07T16:00:00.000Z",
            "content_html": "<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@keyup.native.enter&#x3D;&quot;search&quot;</span><br></pre></td></tr></table></figure>",
            "tags": []
        }
    ]
}